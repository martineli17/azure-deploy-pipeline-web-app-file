pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: BuildRestore
  displayName: Build and Restore
  jobs:
  - job: BuildRestore
    displayName: Build and Restore
    steps:
    - task: UseDotNet@2 
      displayName: "Use .NET 8.0.x"
      inputs:
        version: '8.0.x'
        packageType: sdk

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        projects: '**/*.csproj'
        publishWebProjects: true
        zipAfterPublish: true
        arguments: '-r linux-x64 --configuration Release --output $(Build.ArtifactStagingDirectory)/WebApp'

    - publish: $(Build.ArtifactStagingDirectory)/WebApp
      artifact: WebApp

    - task: Docker@2
      displayName: Login to DockerHub
      inputs:
        command: login
        containerRegistry: docker-personal

    - task: Docker@2
      displayName: Build and Push DockerImage
      inputs:
        command: 'buildAndPush'
        containerRegistry: docker-personal
        repository: fabiomartineli/estudos-azure-publish-from-container
        Dockerfile: ./API/Dockerfile
        buildContext: .
        tags: |
          $(Build.BuildId)
          latest

    - script: echo 'fabiomartineli/estudos-azure-publish-from-container:$(Build.BuildId)' e 'fabiomartineli/estudos-azure-publish-from-container:latest'
      displayName: 'Imagem docker gerada'

- stage: DeployByContainer
  dependsOn: BuildRestore
  jobs:
  - deployment: AzureAppServiceContainer
    displayName: Azure App Service by Container
    environment: personal
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: 'azure-personal'
              appName: 'teste-deploy-azure-pipeline'
              containers: 'fabiomartineli/estudos-azure-publish-from-container:$(Build.BuildId)'
              appSettings: |
                -teste "Deploy by container"

- stage: DeployByCode
  dependsOn: BuildRestore
  jobs:
  - deployment: AzureAppServiceCode
    displayName: Azure App Service by Code
    environment: personal
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              artifactName: WebApp
              downloadType: 'single'
              downloadPath: '$(System.ArtifactsDirectory)/WebApp'
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'azure-personal'
              appType: 'webAppLinux'
              appName: 'teste-deploy-azure-pipeline'
              package: '$(System.ArtifactsDirectory)/WebApp/API.zip'
              appSettings: |
                -teste "Deploy by code"
